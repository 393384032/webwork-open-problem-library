## DBsubject(Differential equations)
## DBchapter(Higher order differential equations)
## DBsection(Boundary value problems)
## Date(7/19/2011)
## Institution(Alfred University)
## Author(Darwyn Cook)
## MLT(SL)
## Level(5)
## TitleText1('Differential Equations')
## AuthorText1('Zill')
## EditionText1('7')
## Section1('11.4')
## Problem1('')
## KEYWORDS('sturm', 'louiville', 'differential', 'equation')

########################################################################

DOCUMENT();      

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "parserMultiAnswer.pl",
#  "weightedGrader.pl",
  "PGgraphmacros.pl",
  "PGchoicemacros.pl",
  "PGcourse.pl"
);
#install_weighted_grader();
# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#
#Context("Numeric");
#Context()->functions->undefine("sin","cos","tan","sinh","cosh","tanh");
#Context()->variables->add(a=>"Real",A=>"Real",B=>"Real",lambda=>"Real");
#Context()->variables->set(lambda=>{limits=>[0,4]});
#Context()->variables->set(lambda => {TeX => '{\lambda}'});
#Context()->functions->undefine("acos","acosh");
#Context()->{error}{msg}{"Function 'acosh' is not allowed in this context"} 
#= "WeBWorK thinks you meant the inverse cosh function, you need to put the multiplication symbol between the a and the cosh";
#Context()->{error}{msg}{"Function 'acos' is not allowed in this context"} 
#= "WeBWorK thinks you meant the inverse cos function, you need to put the multiplication symbol between the a and the cos";
#$simplify = Context()->copy;
#
#Context("Numeric");
#Context()->functions->undefine("cos","tan","cosh","tanh");
#Context()->variables->add(a=>"Real",A=>"Real",B=>"Real",lambda=>"Real");
#Context()->variables->set(lambda=>{limits=>[0,4]});
#Context()->variables->set(lambda => {TeX => '{\lambda}'});
#Context()->functions->undefine("acos","acosh");
#Context()->{error}{msg}{"Function 'acosh' is not allowed in this context"} 
#= "WeBWorK thinks you meant the inverse cosh function, you need to put the multiplication symbol between the a and the cosh";
#Context()->{error}{msg}{"Function 'acos' is not allowed in this context"} 
#= "WeBWorK thinks you meant the inverse cos function, you need to put the multiplication symbol between the a and the cos";
#$nocofunctions = Context()->copy;
#

Context("Numeric");
Context()->variables->add(a=>"Real",A=>"Real",B=>"Real",lambda=>"Real",n=>"Real");
Context()->variables->set(lambda => {TeX => '{\lambda}'});
Context()->strings->add(red=>{},blue=>{},green=>{},black=>{}); 
Context()->functions->undefine("acos","acosh");
Context()->{error}{msg}{"Function 'acosh' is not allowed in this context"} 
= "WeBWorK thinks you meant the inverse cosh function, you need to put the multiplication symbol between the a and the cosh";
Context()->{error}{msg}{"Function 'acos' is not allowed in this context"} 
= "WeBWorK thinks you meant the inverse cos function, you need to put the multiplication symbol between the a and the cos";

$f = Formula("lambda*x")->reduce;

## Case where lambda = 0 ###

$equalzero = Formula("A+B*x");
$equalzero_boundary0 = Formula("A");
$equalzero_boundarya = Formula("A+Ba");
$equalzero_ans = MultiAnswer($equalzero, $equalzero_boundary0, $equalzero_boundarya)->with(
  singleResult => 0,
  checker => sub {
      my ( $correct, $student, $self ) = @_;
      my ( $fstu, $bdy0stu, $bdy1stu ) = @{$student};
      my ( $fcor, $bdy0cor, $bdy1cor ) = @{$correct};
      my $ddf = $fstu->D('x','x');
      my $dfA = $fstu->D('A')->substitute(x=>0);
      my $dfAx = $fstu->D('A','x')->substitute(x=>0);
      my $dfB = $fstu->D('B')->substitute(x=>0);
      my $dfBx = $fstu->D('B','x')->substitute(x=>0);
      my $wronskiian = $dfA*$dfBx-$dfB*$dfAx;
      my $checkDE = 0;
      my $check0 = 0;
      my $check1 = 0; 
      if ( $ddf == Formula("0") and $wronskiian != Formula("0")  ){ 
         $checkDE = 1;
      }
      if ($checkDE == 1 and ($fstu->substitute(x => 0)) == $bdy0stu) {
         $check0 = 1;
         if ($checkDE == 1 and ($fstu->substitute(x => a)) == $bdy1stu ){
           $check1 = 1;
         }   
      } 
      elsif ($checkDE == 1 and ($fstu->substitute(x => a)) == $bdy0stu ){
         $check0 = 1;
         if ($checkDE == 1 and ($fstu->substitute(x => 0)) == $bdy1stu) {
           $check1 = 1;
         }
      }
      elsif ( $checkDE == 1 and 
        ( ($fstu->substitute(x => a)) == $bdy1stu or 
          ($fstu->substitute(x => 0)) == $bdy1stu 
        ) ) {$check1 = 1;} 
      return [$checkDE,$check0,$check1];
  }
);

#zeroprime = $equalzero->D('x');


#$lesszero = Formula("A*cosh(sqrt(lambda)x)+B*sinh(sqrt(lambda)x)");
#$lessprime = $lesszero->D('x');
#$greaterzero = Formula("A*cos(sqrt(lambda)x)+B*sin(sqrt(lambda)x)");
#$greaterprime = $greaterzero->D('x');


##############################################################
#
#  Text for first part.    
#

Context()->texStrings;
BEGIN_TEXT
In this problem we find the eigenfunctions and eigenvalues of the differential equation
\[\frac{d^2y}{dx^2} + \lambda y = 0\]
on the interval \(0\leq x \leq a\), where \(a>0\),  with boundary values
\[y(0) = 0\hskip {20pt} y(a) = 0.\]
$PAR 
For the general solution of the differential equation in the following cases use A and B for your constants and list the functions in alphabetical order, for example \(y = A\cos (x) + B\sin(x)\). For the variable \(\lambda\) type the word lambda, otherwise treat it as you would any other variable.
$BR
$BBOLD Case 1: $EBOLD \(\lambda = 0\)
$BR
Ignoring the boundary values for a moment, the general solution of differential equation is $BR
\(y(x) = \) \{$equalzero_ans->ans_rule\}. 
$PAR The boundary conditions lead to two equations in two unknowns in A and B:
$BCENTER
$BR
\{$equalzero_ans->ans_rule\} = \(0\)
$BR
\{$equalzero_ans->ans_rule\} = \(0\)
$ECENTER
$BR
Solving this system for A and B we obtain
$BCENTER
$BR
A = \{ans_rule\} 
$BR
B = \{ans_rule\}
$ECENTER
$BR
END_TEXT

ANS($equalzero_ans->cmp());
ANS(Compute(0)->cmp());
ANS(Compute(0)->cmp()); 

## Second case
##  lambda < 0 ###

Context()->normalStrings;
#Context()->variables->set(lambda=>{limits=>[-9,-1]});

$lesszero = Formula("A*exp(sqrt(-lambda)*x)+B*exp(-sqrt(-lambda)*x)");
$lesszero_boundary0 = Formula("A+B");
$lesszero_boundarya = Formula("A*exp(sqrt(-lambda)*a)+B*exp(-sqrt(-lambda)*a)");
$lesszero_ans = MultiAnswer($lesszero, $lesszero_boundary0, $lesszero_boundarya)->with(
  singleResult => 0,
  checker => sub {
      Context()->variables->set(lambda=>{limits=>[-4,-.1]});
      my ( $correct, $student, $self ) = @_;
      my ( $fstu, $bdy0stu, $bdy1stu ) = @{$student};
      my ( $fcor, $bdy0cor, $bdy1cor ) = @{$correct};
      my $ddf = $fstu->D('x','x') + Formula("lambda")*$fstu;
      my $dfA = $fstu->D('A')->substitute(x=>0);
      my $dfAx = $fstu->D('A','x')->substitute(x=>0);
      my $dfB = $fstu->D('B')->substitute(x=>0);
      my $dfBx = $fstu->D('B','x')->substitute(x=>0);
      my $wronskiian = $dfA*$dfBx-$dfB*$dfAx;
      my $checkDE = 0;
      my $check0 = 0;
      my $check1 = 0; 
      if ( $ddf == Formula("0") and $wronskiian != Formula("0")  ){ 
         $checkDE = 1;
      }
      if ($checkDE == 1 and ($fstu->substitute(x => 0)) == $bdy0stu) {
         $check0 = 1;
         if ($checkDE == 1 and ($fstu->substitute(x => a)) == $bdy1stu ){
           $check1 = 1;
         }   
      } 
      elsif ($checkDE == 1 and ($fstu->substitute(x => a)) == $bdy0stu ){
         $check0 = 1;
         if ($checkDE == 1 and ($fstu->substitute(x => 0)) == $bdy1stu) {
           $check1 = 1;
         }
      }
      elsif ( $checkDE == 1 and 
        ( ($fstu->substitute(x => a)) == $bdy1stu or 
          ($fstu->substitute(x => 0)) == $bdy1stu 
        ) ) {$check1 = 1;} 
      return [$checkDE,$check0,$check1];
  }
);


Context()->texStrings;
BEGIN_TEXT
$BBOLD Case 2: $EBOLD \(\lambda < 0\)
$BR
Ignoring the boundary values for a moment, the general solution of differential equation is $BR
\(y(x)=\)\{$lesszero_ans->ans_rule(50)\}. 
$BR
The boundary conditions lead to two equations in two unknowns in A and B:
$BCENTER
$BR
\{$lesszero_ans->ans_rule(50)\} = \(0\)
$BR
\{$lesszero_ans->ans_rule(50)\} = \(0\)
$BR
$ECENTER
Since \(\lambda \neq 0\), the only solution of these equations is
$BR 
$BCENTER
A = \{ans_rule\} 
$BR
B = \{ans_rule\}
$ECENTER
$BR
END_TEXT

Context()->normalStrings;

ANS($lesszero_ans->cmp());
ANS(Compute(0)->cmp());
ANS(Compute(0)->cmp()); 

## 3rd case lambda > 0 ##
## 
#Context()->variables->set(lambda=>{limits=>[0,4]});

$greaterzero = Formula("A*cos(sqrt(lambda)x)+B*sin(sqrt(lambda)x)");
$greaterzero_boundary0 = Formula("A");
$greaterzero_boundarya = Formula("A*cos(sqrt(lambda)*a)+B*sin(sqrt(lambda)*a)");
$greaterzero_ans = MultiAnswer($greaterzero, $greaterzero_boundary0, $greaterzero_boundarya)->with(
  singleResult => 0,
  checker => sub {
      Context()->variables->set(lambda=>{limits=>[.1,4]});
      my ( $correct, $student, $self ) = @_;
      my ( $fstu, $bdy0stu, $bdy1stu ) = @{$student};
      my ( $fcor, $bdy0cor, $bdy1cor ) = @{$correct};
      my $ddf = $fstu->D('x','x') + Formula("lambda")*$fstu;
      my $dfA = $fstu->D('A')->substitute(x=>0);
      my $dfAx = $fstu->D('A','x')->substitute(x=>0);
      my $dfB = $fstu->D('B')->substitute(x=>0);
      my $dfBx = $fstu->D('B','x')->substitute(x=>0);
      my $wronskiian = $dfA*$dfBx-$dfB*$dfAx;
      my $checkDE = 0;
      my $check0 = 0;
      my $check1 = 0; 
      if ( $ddf == Formula("0") and $wronskiian != Formula("0")  ){ 
         $checkDE = 1;
      }
      if ($checkDE == 1 and ($fstu->substitute(x => 0)) == $bdy0stu) {
         $check0 = 1;
         if ($checkDE == 1 and ($fstu->substitute(x => a)) == $bdy1stu ){
           $check1 = 1;
         }   
      } 
      elsif ($checkDE == 1 and ($fstu->substitute(x => a)) == $bdy0stu ){
         $check0 = 1;
         if ($checkDE == 1 and ($fstu->substitute(x => 0)) == $bdy1stu) {
           $check1 = 1;
         }
      }
      elsif ( $checkDE == 1 and 
        ( ($fstu->substitute(x => a)) == $bdy1stu or 
          ($fstu->substitute(x => 0)) == $bdy1stu 
        ) ) {$check1 = 1;} 
      return [$checkDE,$check0,$check1];
  }
);

$eigenvalues = Formula("n*pi/a");

Context()->texStrings;
BEGIN_TEXT
$BBOLD Case 3: $EBOLD \(\lambda > 0\)
$BR
$BR
Ignoring the boundary values, the general solution is $BR
\(y(x)=\)\{$greaterzero_ans->ans_rule(50)\}. 
$BR
The boundary conditions lead to two equations in two unknowns in A and B:
$BCENTER
$BR
\{$greaterzero_ans->ans_rule(50)\} = \(0\)
$BR
\{$greaterzero_ans->ans_rule(50)\} = \(0\)
$ECENTER
$BR
Assuming the solution is not identically zero,  these equations say that 
$BR 
$BCENTER
\{ans_rule\}\(= 0\)
$ECENTER
$BR
For all integers n, \(\sin(n\pi) = 0\), so the eigenvalues are 
$BCENTER
\(\sqrt{\lambda} = \) \{$eigenvalues->ans_rule\}
$BR
$ECENTER
for positive integers \(n=1,2,3,4,\cdots\).
END_TEXT

Context()->normalStrings;

ANS($greaterzero_ans->cmp());
ANS(Compute("sin(sqrt(lambda)a)")->cmp());
ANS(Compute("n*pi/a")->cmp());

$eigenfunctions = List(Formula("sin(pi/a*x)"),Formula("sin(2*pi*x/a)"),Formula("sin(3pi/a*x)"),Formula("sin(4pi/a*x)"));

@Goptions = (
  -1,-2,$L,2,                            # dimensions of graph
  axes => [0,0], grid => [3,3],   # number of grid lines
  size => [350,350]                               # pixel dimension
);

$L = Compute(random(2,9));

$plotdomain  = "x in <0,$L>";
@color = ("black","red","green","blue");
@perm = shuffle(4);
@color = @color[@perm];

$greigen = init_graph(@Goptions);
my ($plot) = plot_functions($greigen,"sin(pi*x/$L) for $plotdomain using color:$color[0] and weight=2");
add_functions($greigen, "sin(2*pi*x/$L) for $plotdomain using color:$color[1] and weight=2");
add_functions($greigen, "sin(3*pi*x/$L) for $plotdomain using color:$color[2] and weight=2");
add_functions($greigen, "sin(4*pi*x/$L) for $plotdomain using color:$color[3] and weight=2");
$plot->steps(150);
$figeigen=image(insertGraph($greigen),width=>350,height=>350,tex_size=>350);

$order = List(String("$color[0]"),String("$color[1]"),String("$color[2]"),String("$color[3]"));


Context()->texStrings;
BEGIN_TEXT
$PAR
List the first four nonzero eigenfunctions for the \(\lambda > 0\) case 
$BR
\{ans_rule(50)\}
$BR
Here are graphs of the first four nonzero eigenfunctions on \(\lbrack 0,$L \rbrack\).
$BR
\{$figeigen\}
$BR
List the eigenfunctions in increasing order of their eigenvalues by their color - green, red, blue, black: \{ans_rule(35)\}

END_TEXT

Context()->normalStrings;

ANS($eigenfunctions->cmp(ordered=>1));
ANS($order->cmp(ordered=>1));


##############################################################
#
#  Answers
#
#
### Case 1 equal zero - 16% of problem
#WEIGHTED_ANS($equalzero->cmp, 4);
#WEIGHTED_ANS(Compute("A")->cmp, 3);
#WEIGHTED_ANS(Compute("A+B*a")->cmp, 3);
#WEIGHTED_ANS(Compute("0")->cmp, 3);
#WEIGHTED_ANS(Compute("0")->cmp, 3);
#
### Case 2 less than zero - 35% of problem
#WEIGHTED_ANS($lesszero->cmp, 7);
#WEIGHTED_ANS(Formula($simplify,"A")->cmp, 7);
#WEIGHTED_ANS(Formula("A*cosh(sqrt(lambda)*a)+B*sinh(sqrt(lambda)*a)")->cmp, 7);
#WEIGHTED_ANS(Formula($nocofunctions,"sinh(sqrt(lambda)*a)")->cmp, 7);
#WEIGHTED_ANS(Compute("0")->cmp, 7);
#
### Case 3 less than zero - 35% of problem
#WEIGHTED_ANS($greaterzero->cmp, 7);
#WEIGHTED_ANS(Formula($simplify,"A")->cmp, 7);
#WEIGHTED_ANS(Formula("A*cos(sqrt(lambda)*a)+B*sin(sqrt(lambda)*a)")->cmp, 7);
#WEIGHTED_ANS(Formula($nocofunctions,"sin(sqrt(lambda)*a)")->cmp, 7);
#WEIGHTED_ANS($eigenvalues->cmp, 7);
#
### Solution - 14%
#WEIGHTED_ANS($eigenfunctions->cmp(ordered=>1), 7);
#WEIGHTED_ANS($order->cmp(ordered=>1), 7);

ENDDOCUMENT();        
