# DESCRIPTION
# Asks about time to travel up or downstream based on information.
# ENDDESCRIPTION

## DBsubject(Algebra)
## DBchapter(Functions)
## Institution(University of Missouri-Columbia)
## Author(Rick Lynch)
## Status(R)
## TitleText1('College Algebra')
## AuthorText1('Beecher, Penna, Bittinger')
## EditionText1('4')
## Section1('1.5')
## Problem1('59 60')
## KEYWORDS('functions', 'algebra, application of linear equations')


###########################################################################
# initialization 
###########################################################################
DOCUMENT();
loadMacros(
  "MathObjects.pl",
  "PeriodicRerandomization.pl",
  "PGstandard.pl",
  "contextCurrency.pl",
);

TEXT(beginproblem());
PeriodicRerandomization("3");
$showPartialCorrectAnswers = 1;


###########################################################################
# setup contexts and variables 
###########################################################################
Context("Numeric");
$case = random(0,1,1); # 0 - upstream, 1 - downstream
$time = random(2,7);
$stillsp = random(10,20,1);
$currentsp = random(2,6,1);
if ($case == 0) {
  $dist = ($stillsp - $currentsp)*$time;
} else {
  $dist = ($stillsp + $currentsp)*$time;
}


if ($case == 0) {
  $updown = "upstream";
} else {
  $updown = "downstream";
}


###########################################################################
# state the problem 
###########################################################################
Context()->texStrings;
BEGIN_TEXT
A kayak moves at a rate of $stillsp km/h in still water. If the river's current flows at a rate of $currentsp km/h, how long will it take for the boat to travel $dist km $updown?
$PAR
Time Taken to Travel $updown: \{ans_rule(6)\} hours
END_TEXT


###########################################################################
# check the answer  
###########################################################################
ANS(Compute($time)->cmp());


###########################################################################
# use PeriodicRerandomization to write the answer and generate a new
# version of the problem
###########################################################################
if ($attempts_modp == 0 && $actualAttempts != 0) {
  BEGIN_TEXT
  $PAR
  ${BBOLD}Answer:${EBOLD} $time hours
  $PAR
  END_TEXT
} else {
  BEGIN_TEXT
  $BR
  END_TEXT
}
Context()->normalStrings;
PeriodicStatus(); 


ENDDOCUMENT();